{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://vcluster.com/schemas/config",
  "$defs": {
    "BackingStore": {
      "properties": {
        "embeddedEtcd": {
          "$ref": "#/$defs/EmbeddedEtcd"
        },
        "externalEtcd": {
          "$ref": "#/$defs/ExternalEtcd"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CentralAdmissionControl": {
      "properties": {
        "validatingWebhooks": {
          "items": true,
          "type": "array"
        },
        "mutatingWebhooks": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlane": {
      "properties": {
        "distro": {
          "$ref": "#/$defs/Distro"
        },
        "hostPathMapper": {
          "$ref": "#/$defs/HostPathMapper"
        },
        "coredns": {
          "$ref": "#/$defs/CoreDNS"
        },
        "backingStore": {
          "$ref": "#/$defs/BackingStore"
        },
        "virtualScheduler": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "proxy": {
          "$ref": "#/$defs/ControlPlaneProxy"
        },
        "service": {
          "$ref": "#/$defs/ControlPlaneService"
        },
        "ingress": {
          "$ref": "#/$defs/ControlPlaneIngress"
        },
        "statefulSet": {
          "$ref": "#/$defs/ControlPlaneStatefulSet"
        },
        "observability": {
          "$ref": "#/$defs/ControlPlaneObservability"
        },
        "advanced": {
          "$ref": "#/$defs/ControlPlaneAdvanced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneAdvanced": {
      "properties": {
        "defaultImageRegistry": {
          "type": "string"
        },
        "serviceAccount": {
          "$ref": "#/$defs/ControlPlaneServiceAccount"
        },
        "workloadServiceAccount": {
          "$ref": "#/$defs/ControlPlaneWorkloadServiceAccount"
        },
        "headlessService": {
          "$ref": "#/$defs/ControlPlaneHeadlessService"
        },
        "globalMetadata": {
          "$ref": "#/$defs/ControlPlaneGlobalMetadata"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneGlobalMetadata": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneHeadlessService": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneHighAvailability": {
      "properties": {
        "replicas": {
          "type": "integer"
        },
        "leaseDuration": {
          "type": "integer"
        },
        "renewDeadline": {
          "type": "integer"
        },
        "retryPeriod": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneIngress": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "host": {
          "type": "string"
        },
        "pathType": {
          "type": "string"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneObservability": {
      "properties": {
        "serviceMonitor": {
          "$ref": "#/$defs/ServiceMonitor"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlanePersistence": {
      "properties": {
        "volumeClaim": {
          "$ref": "#/$defs/VolumeClaim"
        },
        "volumeClaimTemplates": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "addVolumes": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "addVolumeMounts": {
          "items": {
            "$ref": "#/$defs/VolumeMount"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneProbes": {
      "properties": {
        "livenessProbe": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "readinessProbe": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "startupProbe": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneProxy": {
      "properties": {
        "bindAddress": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "extraSANs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneScheduling": {
      "properties": {
        "nodeSelector": {
          "type": "object"
        },
        "affinity": {
          "type": "object"
        },
        "tolerations": {
          "items": true,
          "type": "array"
        },
        "priorityClassName": {
          "type": "string"
        },
        "podManagementPolicy": {
          "type": "string"
        },
        "topologySpreadConstraints": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneSecurity": {
      "properties": {
        "podSecurityContext": {
          "type": "object"
        },
        "containerSecurityContext": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneService": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "kubeletNodePort": {
          "type": "integer"
        },
        "httpsNodePort": {
          "type": "integer"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneServiceAccount": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "imagePullSecrets": {
          "items": {
            "$ref": "#/$defs/LocalObjectReference"
          },
          "type": "array"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneStatefulSet": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "workingDir": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "pods": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        },
        "probes": {
          "$ref": "#/$defs/ControlPlaneProbes"
        },
        "security": {
          "$ref": "#/$defs/ControlPlaneSecurity"
        },
        "persistence": {
          "$ref": "#/$defs/ControlPlanePersistence"
        },
        "scheduling": {
          "$ref": "#/$defs/ControlPlaneScheduling"
        },
        "highAvailability": {
          "$ref": "#/$defs/ControlPlaneHighAvailability"
        },
        "resources": {
          "$ref": "#/$defs/Resources"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ControlPlaneWorkloadServiceAccount": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "imagePullSecrets": {
          "items": {
            "$ref": "#/$defs/LocalObjectReference"
          },
          "type": "array"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNS": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "embedded": {
          "type": "boolean"
        },
        "service": {
          "$ref": "#/$defs/CoreDNSService"
        },
        "deployment": {
          "$ref": "#/$defs/CoreDNSDeployment"
        },
        "overwriteConfig": {
          "type": "string"
        },
        "overwriteManifests": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNSDeployment": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "image": {
          "type": "string"
        },
        "replicas": {
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "resources": {
          "$ref": "#/$defs/Resources"
        },
        "pods": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CoreDNSService": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "spec": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Distro": {
      "properties": {
        "k3s": {
          "$ref": "#/$defs/DistroK3s"
        },
        "k8s": {
          "$ref": "#/$defs/DistroK8s"
        },
        "k0s": {
          "$ref": "#/$defs/DistroK0s"
        },
        "eks": {
          "$ref": "#/$defs/DistroK8s"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroContainer": {
      "properties": {
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroContainerDisabled": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK0s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "config": {
          "type": "string"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "securityContext": {
          "type": "object"
        },
        "resources": {
          "type": "object"
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK3s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "securityContext": {
          "type": "object"
        },
        "resources": {
          "type": "object"
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DistroK8s": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "securityContext": {
          "type": "object"
        },
        "resources": {
          "type": "object"
        },
        "apiServer": {
          "$ref": "#/$defs/DistroContainerDisabled"
        },
        "controllerManager": {
          "$ref": "#/$defs/DistroContainerDisabled"
        },
        "scheduler": {
          "$ref": "#/$defs/DistroContainer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmbeddedEtcd": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "migrateFromExternalEtcd": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EnableSwitch": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Experimental": {
      "properties": {
        "Extended": {
          "type": "object"
        },
        "isolatedControlPlane": {
          "$ref": "#/$defs/ExperimentalIsolatedControlPlane"
        },
        "syncSettings": {
          "$ref": "#/$defs/ExperimentalSyncSettings"
        },
        "genericSync": {
          "$ref": "#/$defs/ExperimentalGenericSync"
        },
        "deploy": {
          "$ref": "#/$defs/ExperimentalDeploy"
        },
        "multiNamespaceMode": {
          "$ref": "#/$defs/ExperimentalMultiNamespaceMode"
        },
        "virtualClusterKubeConfig": {
          "$ref": "#/$defs/VirtualClusterKubeConfig"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalDeploy": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "manifests": {
          "type": "string"
        },
        "manifestsTemplate": {
          "type": "string"
        },
        "helm": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalGenericSync": {
      "properties": {
        "version": {
          "type": "string",
          "description": "Version is the config version"
        },
        "export": {
          "items": {
            "$ref": "#/$defs/Export"
          },
          "type": "array",
          "description": "Exports syncs a resource from the virtual cluster to the host"
        },
        "import": {
          "items": {
            "$ref": "#/$defs/Import"
          },
          "type": "array",
          "description": "Imports syncs a resource from the host cluster to virtual cluster"
        },
        "hooks": {
          "$ref": "#/$defs/Hooks",
          "description": "Hooks are hooks that can be used to inject custom patches before syncing"
        },
        "clusterRole": {
          "$ref": "#/$defs/ExperimentalGenericSyncExtraRules"
        },
        "role": {
          "$ref": "#/$defs/ExperimentalGenericSyncExtraRules"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalGenericSyncExtraRules": {
      "properties": {
        "extraRules": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalIsolatedControlPlane": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "headless": {
          "type": "boolean"
        },
        "kubeConfig": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalMultiNamespaceMode": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "namespaceLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExperimentalSyncSettings": {
      "properties": {
        "disableSync": {
          "type": "boolean"
        },
        "rewriteKubernetesService": {
          "type": "boolean"
        },
        "targetNamespace": {
          "type": "string"
        },
        "setOwner": {
          "type": "boolean"
        },
        "syncLabels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Export": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        },
        "selector": {
          "$ref": "#/$defs/Selector",
          "description": "Selector is a label selector to select the synced objects in the virtual cluster.\nIf empty, all objects will be synced."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExportKubeConfig": {
      "properties": {
        "context": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/$defs/SecretReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcd": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "statefulSet": {
          "$ref": "#/$defs/ExternalEtcdStatefulSet"
        },
        "service": {
          "$ref": "#/$defs/ExternalEtcdService"
        },
        "headlessService": {
          "$ref": "#/$defs/ExternalEtcdHeadlessService"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcdHeadlessService": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcdHighAvailability": {
      "properties": {
        "replicas": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcdService": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ExternalEtcdStatefulSet": {
      "properties": {
        "image": {
          "$ref": "#/$defs/Image"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "extraArgs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "resources": {
          "$ref": "#/$defs/Resources"
        },
        "pods": {
          "$ref": "#/$defs/LabelsAndAnnotations"
        },
        "highAvailability": {
          "$ref": "#/$defs/ExternalEtcdHighAvailability"
        },
        "scheduling": {
          "$ref": "#/$defs/ControlPlaneScheduling"
        },
        "security": {
          "$ref": "#/$defs/ControlPlaneSecurity"
        },
        "persistence": {
          "$ref": "#/$defs/ControlPlanePersistence"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Hook": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Verbs are the verbs that the hook should mutate"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the object to be synced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Hooks": {
      "properties": {
        "hostToVirtual": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "HostToVirtual is a hook that is executed before syncing from the host to the virtual cluster"
        },
        "virtualToHost": {
          "items": {
            "$ref": "#/$defs/Hook"
          },
          "type": "array",
          "description": "VirtualToHost is a hook that is executed before syncing from the virtual to the host cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "HostPathMapper": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "central": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "IPBlock": {
      "properties": {
        "cidr": {
          "type": "string",
          "description": "cidr is a string representing the IPBlock\nValid examples are \"192.168.1.0/24\" or \"2001:db8::/64\""
        },
        "except": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "except is a slice of CIDRs that should not be included within an IPBlock\nValid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"\nExcept values will be rejected if they are outside the cidr range\n+optional"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "IPBlock describes a particular CIDR (Ex."
    },
    "Image": {
      "properties": {
        "repository": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Import": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion of the object to sync"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the object to sync"
        },
        "optional": {
          "type": "boolean"
        },
        "replaceOnConflict": {
          "type": "boolean",
          "description": "ReplaceWhenInvalid determines if the controller should try to recreate the object\nif there is a problem applying"
        },
        "patches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "Patches are the patches to apply on the virtual cluster objects\nwhen syncing them from the host cluster"
        },
        "reversePatches": {
          "items": {
            "$ref": "#/$defs/Patch"
          },
          "type": "array",
          "description": "ReversePatches are the patches to apply to host cluster objects\nafter it has been synced to the virtual cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LabelSelectorRequirement": {
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LabelsAndAnnotations": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LimitRange": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "default": {
          "$ref": "#/$defs/LimitRangeLimits"
        },
        "defaultRequest": {
          "$ref": "#/$defs/LimitRangeLimits"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LimitRangeLimits": {
      "properties": {
        "ephemeral-storage": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LocalObjectReference": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
    },
    "MetricsProxy": {
      "properties": {
        "nodes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "pods": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkPolicy": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "fallbackDNS": {
          "type": "string"
        },
        "outgoingConnections": {
          "$ref": "#/$defs/OutgoingConnections"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkProxyKubelets": {
      "properties": {
        "byHostname": {
          "type": "boolean"
        },
        "byIP": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Networking": {
      "properties": {
        "replicateServices": {
          "$ref": "#/$defs/ReplicateServices"
        },
        "resolveServices": {
          "items": {
            "$ref": "#/$defs/ResolveServices"
          },
          "type": "array"
        },
        "advanced": {
          "$ref": "#/$defs/NetworkingAdvanced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkingAdvanced": {
      "properties": {
        "clusterDomain": {
          "type": "string"
        },
        "fallbackHostCluster": {
          "type": "boolean"
        },
        "proxyKubelets": {
          "$ref": "#/$defs/NetworkProxyKubelets"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Observability": {
      "properties": {
        "metrics": {
          "$ref": "#/$defs/ObservabilityMetrics"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ObservabilityMetrics": {
      "properties": {
        "proxy": {
          "$ref": "#/$defs/MetricsProxy"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "OutgoingConnections": {
      "properties": {
        "ipBlock": {
          "$ref": "#/$defs/IPBlock"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Patch": {
      "properties": {
        "op": {
          "type": "string",
          "description": "Operation is the type of the patch"
        },
        "fromPath": {
          "type": "string",
          "description": "FromPath is the path from the other object"
        },
        "path": {
          "type": "string",
          "description": "Path is the path of the patch"
        },
        "namePath": {
          "type": "string",
          "description": "NamePath is the path to the name of a child resource within Path"
        },
        "namespacePath": {
          "type": "string",
          "description": "NamespacePath is path to the namespace of a child resource within Path"
        },
        "value": {
          "description": "Value is the new value to be set to the path"
        },
        "regex": {
          "type": "string",
          "description": "Regex - is regular expresion used to identify the Name,\nand optionally Namespace, parts of the field value that\nwill be replaced with the rewritten Name and/or Namespace"
        },
        "conditions": {
          "items": {
            "$ref": "#/$defs/PatchCondition"
          },
          "type": "array",
          "description": "Conditions are conditions that must be true for\nthe patch to get executed"
        },
        "ignore": {
          "type": "boolean",
          "description": "Ignore determines if the path should be ignored if handled as a reverse patch"
        },
        "sync": {
          "$ref": "#/$defs/PatchSync",
          "description": "Sync defines if a specialized syncer should be initialized using values\nfrom the rewriteName operation as Secret/Configmap names to be synced"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PatchCondition": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is the path within the object to select"
        },
        "subPath": {
          "type": "string",
          "description": "SubPath is the path below the selected object to select"
        },
        "equal": {
          "description": "Equal is the value the path should be equal to"
        },
        "notEqual": {
          "description": "NotEqual is the value the path should not be equal to"
        },
        "empty": {
          "type": "boolean",
          "description": "Empty means that the path value should be empty or unset"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PatchSync": {
      "properties": {
        "secret": {
          "type": "boolean"
        },
        "configmap": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Platform": {
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "apiKey": {
          "$ref": "#/$defs/SecretKeyReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Plugin": {
      "properties": {
        "name": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "config": {
          "type": "object"
        },
        "securityContext": {
          "type": "object"
        },
        "resources": {
          "type": "object"
        },
        "volumeMounts": {
          "items": true,
          "type": "array"
        },
        "rbac": {
          "$ref": "#/$defs/PluginsRBAC"
        },
        "version": {
          "type": "string"
        },
        "env": {
          "items": true,
          "type": "array"
        },
        "envFrom": {
          "items": true,
          "type": "array"
        },
        "lifecycle": {
          "type": "object"
        },
        "livenessProbe": {
          "type": "object"
        },
        "readinessProbe": {
          "type": "object"
        },
        "startupProbe": {
          "type": "object"
        },
        "workingDir": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Plugins": {
      "properties": {
        "name": {
          "type": "string"
        },
        "command": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "config": {
          "type": "object"
        },
        "securityContext": {
          "type": "object"
        },
        "resources": {
          "type": "object"
        },
        "volumeMounts": {
          "items": true,
          "type": "array"
        },
        "rbac": {
          "$ref": "#/$defs/PluginsRBAC"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PluginsRBAC": {
      "properties": {
        "role": {
          "items": {
            "$ref": "#/$defs/RBACPolicyRule"
          },
          "type": "array"
        },
        "clusterRole": {
          "items": {
            "$ref": "#/$defs/RBACPolicyRule"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Policies": {
      "properties": {
        "podSecurityStandard": {
          "type": "string"
        },
        "resourceQuota": {
          "$ref": "#/$defs/ResourceQuota"
        },
        "limitRange": {
          "$ref": "#/$defs/LimitRange"
        },
        "networkPolicy": {
          "$ref": "#/$defs/NetworkPolicy"
        },
        "centralAdmissionControl": {
          "$ref": "#/$defs/CentralAdmissionControl"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBAC": {
      "properties": {
        "clusterRole": {
          "$ref": "#/$defs/RBACClusterRole"
        },
        "role": {
          "$ref": "#/$defs/RBACRole"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACClusterRole": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "overwriteRules": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "extraRules": {
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACPolicyRule": {
      "properties": {
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs."
        },
        "apiGroups": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of\nthe enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups."
        },
        "resources": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources."
        },
        "resourceNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed."
        },
        "nonResourceURLs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path\nSince non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.\nRules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RBACRole": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "overwriteRules": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "extraRules": {
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ReplicateServices": {
      "properties": {
        "toHost": {
          "items": {
            "$ref": "#/$defs/ServiceMapping"
          },
          "type": "array"
        },
        "fromHost": {
          "items": {
            "$ref": "#/$defs/ServiceMapping"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceHostname": {
      "properties": {
        "hostname": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceService": {
      "properties": {
        "service": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServiceTarget": {
      "properties": {
        "vcluster": {
          "$ref": "#/$defs/ResolveServiceService"
        },
        "host": {
          "$ref": "#/$defs/ResolveServiceService"
        },
        "external": {
          "$ref": "#/$defs/ResolveServiceHostname"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResolveServices": {
      "properties": {
        "service": {
          "type": "string"
        },
        "target": {
          "$ref": "#/$defs/ResolveServiceTarget"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ResourceQuota": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "quota": {
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/$defs/ScopeSelector"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Resources": {
      "properties": {
        "limits": {
          "type": "object"
        },
        "requests": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ScopeSelector": {
      "properties": {
        "matchExpressions": {
          "items": {
            "$ref": "#/$defs/LabelSelectorRequirement"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SecretKeyReference": {
      "properties": {
        "value": {
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/$defs/SecretReference"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SecretReference": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name is unique within a namespace to reference a secret resource."
        },
        "namespace": {
          "type": "string",
          "description": "namespace defines the space within which the secret name must be unique."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "SecretReference represents a Secret Reference."
    },
    "Selector": {
      "properties": {
        "labelSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "LabelSelector are the labels to select the object from"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ServiceMapping": {
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ServiceMonitor": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Sync": {
      "properties": {
        "toHost": {
          "$ref": "#/$defs/SyncToHost"
        },
        "fromHost": {
          "$ref": "#/$defs/SyncFromHost"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncAllResource": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "all": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncFromHost": {
      "properties": {
        "csiDrivers": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "csiNodes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "csiStorageCapacities": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "ingressClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "events": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "storageClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "nodes": {
          "$ref": "#/$defs/SyncNodes"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncNodeSelector": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncNodes": {
      "properties": {
        "real": {
          "$ref": "#/$defs/SyncRealNodes"
        },
        "pseudo": {
          "$ref": "#/$defs/EnableSwitch"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncPods": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "translateImage": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "enforceTolerations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "validate format"
        },
        "useSecretsForSATokens": {
          "type": "boolean"
        },
        "rewriteHosts": {
          "$ref": "#/$defs/SyncRewriteHosts"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncRealNodes": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "syncAll": {
          "type": "boolean"
        },
        "syncLabelsTaints": {
          "type": "boolean"
        },
        "clearImageStatus": {
          "type": "boolean"
        },
        "selector": {
          "$ref": "#/$defs/SyncNodeSelector"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncRewriteHosts": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "initContainerImage": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SyncToHost": {
      "properties": {
        "services": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "endpoints": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "ingresses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "priorityClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "networkPolicies": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "volumeSnapshots": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "podDisruptionBudgets": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "serviceAccounts": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "storageClasses": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "persistentVolumes": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "persistentVolumeClaims": {
          "$ref": "#/$defs/EnableSwitch"
        },
        "configMaps": {
          "$ref": "#/$defs/SyncAllResource"
        },
        "secrets": {
          "$ref": "#/$defs/SyncAllResource"
        },
        "pods": {
          "$ref": "#/$defs/SyncPods"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Telemetry": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "instanceCreators": {
          "type": "string"
        },
        "platformUserID": {
          "type": "string"
        },
        "platformInstanceID": {
          "type": "string"
        },
        "machineID": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "VirtualClusterKubeConfig": {
      "properties": {
        "kubeConfig": {
          "type": "string"
        },
        "serverCAKey": {
          "type": "string"
        },
        "serverCACert": {
          "type": "string"
        },
        "clientCACert": {
          "type": "string"
        },
        "requestHeaderCACert": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "VolumeClaim": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "accessModes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "retentionPolicy": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "storageClass": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "VolumeMount": {
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false."
        },
        "mountPath": {
          "type": "string",
          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
        },
        "subPath": {
          "type": "string",
          "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root)."
        },
        "mountPropagation": {
          "type": "string",
          "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10."
        },
        "subPathExpr": {
          "type": "string",
          "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "VolumeMount describes a mounting of a Volume within a container."
    }
  },
  "properties": {
    "exportKubeConfig": {
      "$ref": "#/$defs/ExportKubeConfig"
    },
    "controlPlane": {
      "$ref": "#/$defs/ControlPlane"
    },
    "sync": {
      "$ref": "#/$defs/Sync"
    },
    "observability": {
      "$ref": "#/$defs/Observability"
    },
    "networking": {
      "$ref": "#/$defs/Networking"
    },
    "plugin": {
      "anyOf": [
        {
          "patternProperties": {
            ".*": {
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        }
      ],
      "additionalProperties": {
        "$ref": "#/$defs/Plugin"
      }
    },
    "plugins": {
      "anyOf": [
        {
          "patternProperties": {
            ".*": {
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        }
      ],
      "additionalProperties": {
        "$ref": "#/$defs/Plugins"
      }
    },
    "policies": {
      "$ref": "#/$defs/Policies"
    },
    "rbac": {
      "$ref": "#/$defs/RBAC"
    },
    "telemetry": {
      "$ref": "#/$defs/Telemetry",
      "description": "Telemetry is the configuration related to telemetry gathered about vcluster usage."
    },
    "experimental": {
      "$ref": "#/$defs/Experimental"
    },
    "platform": {
      "$ref": "#/$defs/Platform"
    },
    "serviceCIDR": {
      "type": "string",
      "description": "legacy for compatibility"
    },
    "pro": {
      "type": "boolean"
    }
  },
  "additionalProperties": false,
  "type": "object"
}